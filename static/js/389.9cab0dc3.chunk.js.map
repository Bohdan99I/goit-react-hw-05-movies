{"version":3,"file":"static/js/389.9cab0dc3.chunk.js","mappings":"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","sources":["components/TmdbMovies/TmdbMovies.sryled.jsx","components/TmdbMovies/TmdbMovies.jsx","components/TmdbSearch/TmdbSearch.styled.jsx","components/TmdbSearch/TmdbSearch.jsx","pages/Movies.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 18px;\n  text-decoration: none;\n  &:hover,\n  &:focus {\n    font-size: 20px;\n    color: green;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, StyledLink } from './TmdbMovies.sryled';\n\nfunction TmdbMoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(\n        ({ id, title }) =>\n          title && (\n            <li key={id}>\n              <StyledLink\n                key={id}\n                to={`/movies/${id}`}\n                state={{ from: location }}\n              >\n                {title}\n              </StyledLink>\n            </li>\n          )\n      )}\n    </List>\n  );\n}\n\nTmdbMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default TmdbMoviesList;","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  gap: 15px;\n  padding-top: 25px;\n`;\n\nexport const Input = styled.input`\n  width: 260px;\n`;\n\nexport const Button = styled.button`\n  padding: 5px;\n  border: 1px solid #978a8a;\n  border-radius: 2px;\n\n  &:hover,\n  &:focus {\n    background-color: green;\n    color: #fff;\n    cursor: pointer;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Form, Input, Button } from './TmdbSearch.styled';\n\nfunction TmdbSearch({ onSubmit }) {\n  const [queryValue, setQueryValue] = useState('');\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    onSubmit(queryValue);\n    setQueryValue('');\n  };\n\n  const handleInputChange = evt => {\n    setQueryValue(evt.target.value);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        value={queryValue}\n        onChange={handleInputChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n}\n\nTmdbSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default TmdbSearch;","import React, { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport TmdbMoviesList from 'components/TmdbMovies/TmdbMovies';\nimport TmdbSearch from 'components/TmdbSearch/TmdbSearch';\nimport { fetchMovieSearch } from 'services/tmdbAPI';\n\nfunction Movie() {\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const handleSubmit = async value => {\n    try {\n      setSearchParams({ query: value });\n      if (value) {\n        const searchResults = await fetchMovieSearch(value);\n        setMovies(searchResults);\n      } else {\n        setMovies([]);\n      }\n    } catch (error) {\n      console.error('Error fetching movie search results:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchMovieSearch(query).then(res => setMovies(res));\n  }, [query]);\n\n  return (\n    <>\n      <TmdbSearch location={location} onSubmit={handleSubmit} />\n      {movies.length > 0 ? (\n        <TmdbMoviesList movies={movies} />\n      ) : (\n        <p>No movies found</p>\n      )}\n    </>\n  );\n}\n\nexport default Movie;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYzZhZWIwMTA3MjQ3MzkyMGUyNzU3MzdhZmE3MDQwMCIsInN1YiI6IjY0ZDI2MmFiYzNiZmZlMGYwMjg2N2NkZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ak4ysbLjBJTalYzsYWQkuamX-ttKVaPC86KyFzbLchk`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await instance.get('/trending/all/day');\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    const response = await instance.get('/search/movie', {\n      params: { query },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies by query:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await instance.get(`/movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchAddition = async (id, param) => {\n  try {\n    const response = await instance.get(`/movie/${id}/${param}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching additional movie data:', error);\n    throw error;\n  }\n};"],"names":["List","styled","StyledLink","Link","movies","location","useLocation","map","id","title","to","state","from","Form","Input","Button","onSubmit","useState","queryValue","setQueryValue","evt","preventDefault","type","name","value","onChange","target","setMovies","useSearchParams","searchParams","setSearchParams","query","get","handleSubmit","fetchMovieSearch","searchResults","console","error","useEffect","then","res","length","TmdbMovies","axios","instance","baseURL","headers","Accept","Authorization","fetchTrendingMovies","response","data","results","params","fetchMovieDetails","fetchAddition","param"],"sourceRoot":""}