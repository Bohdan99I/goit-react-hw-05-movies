{"version":3,"file":"static/js/837.b7e9efaa.chunk.js","mappings":"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","sources":["components/TmdbMovieDetails/TmdbMovieDetails.styled.jsx","components/TmdbMovieDetails/TmdbMovieDetails.jsx","pages/MovieDetails.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n`;\n\nexport const BtN = styled(Link)`\n  display: block;\n  padding: 5px;\n  text-decoration: none;\n  &:hover,\n  &:focus {\n    color: green;\n    font-weight: bold;\n  }\n  &::before {\n    content: '';\n  }\n`;\nexport const ContainerDetails = styled.div`\n  padding: 25px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 0;\n`;\n\nexport const Text = styled.p`\n  text-align: justify;\n`;\n\nexport const Addition = styled.div`\n  border-top: 2px solid green;\n  border-bottom: 2px solid green;\n`;\n\nexport const AddList = styled.ul`\n  list-style: none;\n`;\n\nexport const AddLink = styled(NavLink)`\n  display: block;\n  text-decoration: none;\n  margin-bottom: 10px;\n  &:hover,\n  &:focus {\n    color: #c25151;\n  }\n  &.active {\n    color: green;\n    font-weight: bold;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport React, { useRef, Suspense } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport {\n  Container,\n  BtN,\n  ContainerDetails,\n  Title,\n  Text,\n  Addition,\n  AddList,\n  AddLink,\n} from './TmdbMovieDetails.styled';\n\nfunction TmdbMovieDetails({ details }) {\n  const { title, release_date, vote_average, overview, genres, poster_path } =\n    details;\n  const date = new Date(release_date).getFullYear();\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? './movies');\n\n  return (\n    <>\n      <BtN to={backLinkLocation.current}>Go back</BtN>\n      {details && (\n        <>\n          <Container>\n            <img\n              src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n              width={250}\n              height={400}\n              alt={title}\n            />\n            <ContainerDetails>\n              <Title>\n                {title} ({date})\n              </Title>\n              <p>User score: {Math.round(vote_average * 10)}%</p>\n              <h3>Overview</h3>\n              <Text>{overview}</Text>\n              <h3>Genres</h3>\n              {genres\n                ? genres.map(genre => genre.name + ' ')\n                : 'Not information'}\n            </ContainerDetails>\n          </Container>\n          <Addition>\n            <h3>Additional information</h3>\n            <AddList>\n              <li>\n                <AddLink to=\"cast\">Cast</AddLink>\n              </li>\n              <li>\n                <AddLink to=\"review\">Review</AddLink>\n              </li>\n            </AddList>\n          </Addition>\n        </>\n      )}\n      <Suspense fallback={<div>Please wait...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n}\n\nTmdbMovieDetails.propTypes = {\n  details: PropTypes.shape({\n    title: PropTypes.string,\n    release_date: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n    genres: PropTypes.array,\n    poster_path: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TmdbMovieDetails;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from 'services/tmdbAPI';\nimport TmdbMovieDetails from 'components/TmdbMovieDetails/TmdbMovieDetails';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [details, setDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    fetchMovieDetails(movieId)\n      .then(res => {\n        setDetails(res);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading ? (\n        <p>Please wait...</p>\n      ) : error ? (\n        <p>Error: {error.message}</p>\n      ) : (\n        <TmdbMovieDetails details={details} />\n      )}\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYzZhZWIwMTA3MjQ3MzkyMGUyNzU3MzdhZmE3MDQwMCIsInN1YiI6IjY0ZDI2MmFiYzNiZmZlMGYwMjg2N2NkZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ak4ysbLjBJTalYzsYWQkuamX-ttKVaPC86KyFzbLchk`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await instance.get('/trending/all/day');\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    const response = await instance.get('/search/movie', {\n      params: { query },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies by query:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await instance.get(`/movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchAddition = async (id, param) => {\n  try {\n    const response = await instance.get(`/movie/${id}/${param}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching additional movie data:', error);\n    throw error;\n  }\n};"],"names":["Container","styled","BtN","Link","ContainerDetails","Title","Text","Addition","AddList","AddLink","NavLink","details","title","release_date","vote_average","overview","genres","poster_path","date","Date","getFullYear","location","useLocation","backLinkLocation","useRef","state","from","to","current","src","width","height","alt","Math","round","map","genre","name","Suspense","fallback","movieId","useParams","useState","setDetails","isLoading","setIsLoading","error","setError","useEffect","fetchMovieDetails","then","res","catch","err","message","axios","instance","baseURL","headers","Accept","Authorization","fetchTrendingMovies","get","response","data","results","console","fetchMovieSearch","query","params","id","fetchAddition","param"],"sourceRoot":""}