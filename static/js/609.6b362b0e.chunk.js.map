{"version":3,"file":"static/js/609.6b362b0e.chunk.js","mappings":"mPAEaA,EAAOC,EAAAA,EAAAA,GAAH,+DAKJC,EAAOD,EAAAA,EAAAA,GAAH,8GAOJE,EAAOF,EAAAA,EAAAA,EAAH,8C,SCoCjB,MA7CA,WACE,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACHT,IACLU,EAAAA,EAAAA,IAAcV,EAAS,WACpBW,MAAK,SAAAC,GACJR,EAAWQ,EAAIC,SACfP,GAAW,EACZ,IACAQ,OAAM,SAAAC,GACLP,EAASO,GACTT,GAAW,EACZ,GACJ,GAAE,CAACN,IAEAK,GACK,iDAIP,yBACGE,GACC,qDAA6BA,EAAMS,YAEnC,SAACpB,EAAD,UACGO,EAAQc,OACPd,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,UAACvB,EAAD,YACE,UAACC,EAAD,sBAAeqB,MACf,uBAAIC,MAFKF,EADD,KAOZ,yEAMX,C,uKC9CDG,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAWD,EAAAA,EAAAA,OAAa,CAC5BE,QAAS,+BACTC,QAAS,CACPC,OAAQ,mBACRC,cAAc,gOAILC,EAAmB,mCAAG,6GAERL,EAASM,IAAI,qBAFL,cAEzBC,EAFyB,yBAGxBA,EAASC,KAAKlB,SAHU,sCAK/BmB,QAAQzB,MAAM,kCAAd,MAL+B,8DAAH,qDAUnB0B,EAAgB,mCAAG,WAAMC,GAAN,gGAELX,EAASM,IAAI,gBAAiB,CACnDM,OAAQ,CAAED,MAAAA,KAHgB,cAEtBJ,EAFsB,yBAKrBA,EAASC,KAAKlB,SALO,sCAO5BmB,QAAQzB,MAAM,mCAAd,MAP4B,8DAAH,sDAYhB6B,EAAiB,mCAAG,WAAMjB,GAAN,gGAENI,EAASM,IAAT,iBAAuBV,IAFjB,cAEvBW,EAFuB,yBAGtBA,EAASC,MAHa,sCAK7BC,QAAQzB,MAAM,gCAAd,MAL6B,8DAAH,sDAUjBG,EAAa,mCAAG,WAAOS,EAAIkB,GAAX,gGAEFd,EAASM,IAAT,iBAAuBV,EAAvB,YAA6BkB,IAF3B,cAEnBP,EAFmB,yBAGlBA,EAASC,MAHS,sCAKzBC,QAAQzB,MAAM,wCAAd,MALyB,8DAAH,uD","sources":["components/TmdbReview/TmdbReview.styled.jsx","components/TmdbReview/TmdbReview.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 20px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  padding: 20px;\n  font-size: 14px;\n  text-align: justify;\n  margin-bottom: 20px;\n`;\n\nexport const Name = styled.p`\n  font-weight: bold;\n`;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchAddition } from 'services/tmdbAPI';\nimport { List, Item, Name } from './TmdbReview.styled';\n\nfunction TmdbReview() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieId) return;    \n    fetchAddition(movieId, 'reviews')\n      .then(res => {\n        setReviews(res.results);\n        setLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n        setLoading(false);\n      });\n  }, [movieId]);\n\n  if (loading) {\n    return <div>Loading reviews...</div>;\n  }\n\n  return (\n    <div>\n      {error ? (\n        <div>Error loading reviews: {error.message}</div>\n      ) : (\n        <List>\n          {reviews.length ? (\n            reviews.map(({ id, author, content }) => (\n              <Item key={id}>\n                <Name>Author: {author}</Name>\n                <p>{content}</p>\n              </Item>\n            ))\n          ) : (\n            <div>We don't have any reviews for this movie</div>\n          )}\n        </List>\n      )}\n    </div>\n  );\n}\n\nexport default TmdbReview;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYzZhZWIwMTA3MjQ3MzkyMGUyNzU3MzdhZmE3MDQwMCIsInN1YiI6IjY0ZDI2MmFiYzNiZmZlMGYwMjg2N2NkZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ak4ysbLjBJTalYzsYWQkuamX-ttKVaPC86KyFzbLchk`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await instance.get('/trending/all/day');\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    const response = await instance.get('/search/movie', {\n      params: { query },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies by query:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await instance.get(`/movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchAddition = async (id, param) => {\n  try {\n    const response = await instance.get(`/movie/${id}/${param}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching additional movie data:', error);\n    throw error;\n  }\n};"],"names":["List","styled","Item","Name","movieId","useParams","useState","reviews","setReviews","loading","setLoading","error","setError","useEffect","fetchAddition","then","res","results","catch","err","message","length","map","id","author","content","axios","instance","baseURL","headers","Accept","Authorization","fetchTrendingMovies","get","response","data","console","fetchMovieSearch","query","params","fetchMovieDetails","param"],"sourceRoot":""}