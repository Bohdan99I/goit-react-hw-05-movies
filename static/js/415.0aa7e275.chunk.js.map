{"version":3,"file":"static/js/415.0aa7e275.chunk.js","mappings":"iNAGaA,EAAOC,EAAAA,EAAAA,GAAH,wGAOJC,GAAaD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,iJ,SCyBvB,MA/BA,YAAqC,IAAXG,EAAU,EAAVA,OAClBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACN,EAAD,UACGI,EAAOG,KACN,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACEA,IACE,yBACE,SAACP,EAAD,CAEEQ,GAAE,kBAAaF,GACfG,MAAO,CAAEC,KAAMP,GAHjB,SAKGI,GAJID,IAFAA,EAFb,KAeP,C,8ECWD,UA/Ba,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAeU,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJR,EAAUQ,GACVN,GAAa,EACd,IACAO,OAAM,SAAAC,GACLN,EAASM,GACTR,GAAa,EACd,GACJ,GAAE,KAGD,4BACE,2CACCD,GACC,4CACEE,GACF,kDAA0BA,EAAMQ,YAEhC,SAAC,IAAD,CAAYrB,OAAQA,MAI3B,C,uKC/BDsB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAWD,EAAAA,EAAAA,OAAa,CAC5BE,QAAS,+BACTC,QAAS,CACPC,OAAQ,mBACRC,cAAc,gOAILX,EAAmB,mCAAG,6GAERO,EAASK,IAAI,qBAFL,cAEzBC,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,sCAK/BC,QAAQnB,MAAM,kCAAd,MAL+B,8DAAH,qDAUnBoB,EAAgB,mCAAG,WAAMC,GAAN,gGAELX,EAASK,IAAI,gBAAiB,CACnDO,OAAQ,CAAED,MAAAA,KAHgB,cAEtBL,EAFsB,yBAKrBA,EAASC,KAAKC,SALO,sCAO5BC,QAAQnB,MAAM,mCAAd,MAP4B,8DAAH,sDAYhBuB,EAAiB,mCAAG,WAAMhC,GAAN,gGAENmB,EAASK,IAAT,iBAAuBxB,IAFjB,cAEvByB,EAFuB,yBAGtBA,EAASC,MAHa,sCAK7BE,QAAQnB,MAAM,gCAAd,MAL6B,8DAAH,sDAUjBwB,EAAa,mCAAG,WAAOjC,EAAIkC,GAAX,gGAEFf,EAASK,IAAT,iBAAuBxB,EAAvB,YAA6BkC,IAF3B,cAEnBT,EAFmB,yBAGlBA,EAASC,MAHS,sCAKzBE,QAAQnB,MAAM,wCAAd,MALyB,8DAAH,uD","sources":["components/TmdbMovies/TmdbMovies.sryled.jsx","components/TmdbMovies/TmdbMovies.jsx","pages/Home.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 18px;\n  text-decoration: none;\n  \n  &:hover,\n  &:focus {\n    font-size: 20px;\n    color: green;\n  }\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { List, StyledLink } from './TmdbMovies.sryled';\n\nfunction TmdbMoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(\n        ({ id, title }) =>\n          title && (\n            <li key={id}>\n              <StyledLink\n                key={id}\n                to={`/movies/${id}`}\n                state={{ from: location }}\n              >\n                {title}\n              </StyledLink>\n            </li>\n          )\n      )}\n    </List>\n  );\n}\n\nTmdbMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default TmdbMoviesList;","import MoviesList from 'components/TmdbMovies/TmdbMovies';\nimport React, { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from 'services/tmdbAPI';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchTrendingMovies()\n      .then(res => {\n        setMovies(res);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setError(err);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1>Trending today</h1>\n      {isLoading ? (\n        <div>Please wait...</div>\n      ) : error ? (\n        <div>Error loading data: {error.message}</div>\n      ) : (\n        <MoviesList movies={movies} />\n      )}\n    </div>\n  );\n};\n\nexport default Home;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYzZhZWIwMTA3MjQ3MzkyMGUyNzU3MzdhZmE3MDQwMCIsInN1YiI6IjY0ZDI2MmFiYzNiZmZlMGYwMjg2N2NkZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ak4ysbLjBJTalYzsYWQkuamX-ttKVaPC86KyFzbLchk`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await instance.get('/trending/all/day');\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    const response = await instance.get('/search/movie', {\n      params: { query },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies by query:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await instance.get(`/movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchAddition = async (id, param) => {\n  try {\n    const response = await instance.get(`/movie/${id}/${param}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching additional movie data:', error);\n    throw error;\n  }\n};"],"names":["List","styled","StyledLink","Link","movies","location","useLocation","map","id","title","to","state","from","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","fetchTrendingMovies","then","res","catch","err","message","axios","instance","baseURL","headers","Accept","Authorization","get","response","data","results","console","fetchMovieSearch","query","params","fetchMovieDetails","fetchAddition","param"],"sourceRoot":""}