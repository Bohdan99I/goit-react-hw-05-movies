{"version":3,"file":"static/js/231.5fb6f642.chunk.js","mappings":"iPAEaA,EAAOC,EAAAA,EAAAA,GAAH,4EAMJC,EAAOD,EAAAA,EAAAA,GAAH,4E,SCsCjB,MAzCA,WACE,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACHL,IAELM,EAAAA,EAAAA,IAAcN,EAAS,WACpBO,MAAK,SAAAC,GACJ,IAAMC,EAAUD,EAAIL,KACpBC,EAAQK,EACT,IACAC,OAAM,SAAAC,GACLC,QAAQC,MAAM,uBAAwBF,EACvC,GACJ,GAAE,CAACX,KAGF,+BACE,SAACH,EAAD,UACGM,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACR,UAACnB,EAAD,WACGiB,IACC,gBACEG,IAAG,yCAAoCH,GACvCI,MAAM,KACNC,OAAO,MACPC,IAAKL,KAGT,iCACE,uBAAIA,KACJ,uBAAIC,SAXGH,EADH,OAmBjB,C,uKC1CDQ,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAWD,EAAAA,EAAAA,OAAa,CAC5BE,QAAS,+BACTC,QAAS,CACPC,OAAQ,mBACRC,cAAc,gOAILC,EAAmB,mCAAG,6GAERL,EAASM,IAAI,qBAFL,cAEzBC,EAFyB,yBAGxBA,EAASC,KAAKC,SAHU,sCAK/BrB,QAAQC,MAAM,kCAAd,MAL+B,8DAAH,qDAUnBqB,EAAgB,mCAAG,WAAMC,GAAN,gGAELX,EAASM,IAAI,gBAAiB,CACnDM,OAAQ,CAAED,MAAAA,KAHgB,cAEtBJ,EAFsB,yBAKrBA,EAASC,KAAKC,SALO,sCAO5BrB,QAAQC,MAAM,mCAAd,MAP4B,8DAAH,sDAYhBwB,EAAiB,mCAAG,WAAMtB,GAAN,gGAENS,EAASM,IAAT,iBAAuBf,IAFjB,cAEvBgB,EAFuB,yBAGtBA,EAASC,MAHa,sCAK7BpB,QAAQC,MAAM,gCAAd,MAL6B,8DAAH,sDAUjBP,EAAa,mCAAG,WAAOS,EAAIuB,GAAX,gGAEFd,EAASM,IAAT,iBAAuBf,EAAvB,YAA6BuB,IAF3B,cAEnBP,EAFmB,yBAGlBA,EAASC,MAHS,sCAKzBpB,QAAQC,MAAM,wCAAd,MALyB,8DAAH,uD","sources":["components/TmdbCast/TmdbCast.styled.jsx","components/TmdbCast/TmdbCast.jsx","services/tmdbAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: grid;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nexport const Item = styled.li`\n  border-top: 1px solid green;\n  font-size: 14px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchAddition } from 'services/tmdbAPI';\nimport { List, Item } from './TmdbCast.styled';\n\nfunction TmdbCast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    fetchAddition(movieId, 'credits')\n      .then(res => {\n        const castArr = res.cast;\n        setCast(castArr);\n      })\n      .catch(err => {\n        console.error('Error fetching cast:', err);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <List>\n        {cast.map(({ id, profile_path, name, character }) => (\n          <Item key={id}>\n            {profile_path && (\n              <img\n                src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                width=\"80\"\n                height=\"120\"\n                alt={name}\n              />\n            )}\n            <>\n              <p>{name}</p>\n              <p>{character}</p>\n            </>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n}\n\nexport default TmdbCast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  headers: {\n    Accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlYzZhZWIwMTA3MjQ3MzkyMGUyNzU3MzdhZmE3MDQwMCIsInN1YiI6IjY0ZDI2MmFiYzNiZmZlMGYwMjg2N2NkZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ak4ysbLjBJTalYzsYWQkuamX-ttKVaPC86KyFzbLchk`,\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  try {\n    const response = await instance.get('/trending/all/day');\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieSearch = async query => {\n  try {\n    const response = await instance.get('/search/movie', {\n      params: { query },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Error searching movies by query:', error);\n    throw error;\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const response = await instance.get(`/movie/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchAddition = async (id, param) => {\n  try {\n    const response = await instance.get(`/movie/${id}/${param}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching additional movie data:', error);\n    throw error;\n  }\n};"],"names":["List","styled","Item","movieId","useParams","useState","cast","setCast","useEffect","fetchAddition","then","res","castArr","catch","err","console","error","map","id","profile_path","name","character","src","width","height","alt","axios","instance","baseURL","headers","Accept","Authorization","fetchTrendingMovies","get","response","data","results","fetchMovieSearch","query","params","fetchMovieDetails","param"],"sourceRoot":""}